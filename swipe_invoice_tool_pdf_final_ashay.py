# -*- coding: utf-8 -*-
"""Swipe-Invoice-Tool-Pdf-Final-ashay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OCF9gbbA79ADcPNmJPAP8kE9teFoTGo-
"""

!pip install PyPDF2 requests pillow pytesseract opencv-python-headless numpy

#Final script which works with both images and pdfs
import PyPDF2
import requests
import json
import os
from typing import List, Dict
from google.colab import files
from io import BytesIO
from PIL import Image
import pytesseract
import cv2
import numpy as np

# Install necessary libraries
!apt-get install -y tesseract-ocr
!pip install pytesseract opencv-python-headless

def upload_files():
    print("Please upload your PDF invoices and/or image files:")
    uploaded = files.upload()
    return uploaded

def extract_text_from_pdf(pdf_file: BytesIO) -> str:
    reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

def extract_text_from_image(image_file: BytesIO) -> str:
    # Read the image file
    image = Image.open(image_file)

    # Convert to numpy array for OpenCV processing
    image_np = np.array(image)

    # Convert to grayscale
    gray = cv2.cvtColor(image_np, cv2.COLOR_BGR2GRAY)

    # Apply thresholding to preprocess the image
    threshold = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]

    # Perform text extraction
    text = pytesseract.image_to_string(threshold)

    return text

def extract_invoice_details(text: str) -> Dict[str, any]:
    prompt = f"""
    Extract the following details from the invoice text:
    1. Customer details (name, address, phone, email)
    2. Products (including quantity, price, and HSN code if available)
    3. Total Amount
    4. GSTIN (if available)
    5. Invoice Number
    6. Invoice Date

    Invoice text:
    {text}

    Respond in JSON format.
    """

    response = call_llm_api(prompt)

    invoice_details = json.loads(response)
    return invoice_details

def call_llm_api(prompt: str) -> str:
    api_url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {openai_api_key}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.2
    }
    response = requests.post(api_url, headers=headers, json=data)
    return response.json()['choices'][0]['message']['content']

def process_file(file_content: BytesIO, filename: str) -> Dict[str, any]:
    if filename.lower().endswith('.pdf'):
        text = extract_text_from_pdf(file_content)
    elif filename.lower().endswith(('.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif')):
        text = extract_text_from_image(file_content)
    else:
        return {"filename": filename, "error": "Unsupported file format"}

    invoice_details = extract_invoice_details(text)
    return {
        "filename": filename,
        "invoice_data": invoice_details
    }

def process_all_files(uploaded_files: Dict[str, BytesIO]) -> List[Dict[str, any]]:
    results = []
    for filename, file_content in uploaded_files.items():
        result = process_file(BytesIO(file_content), filename)
        results.append(result)
    return results

# Main execution
uploaded_files = upload_files()

# Get OpenAI API key
openai_api_key = input("Enter your OpenAI API key: ")

all_file_data = process_all_files(uploaded_files)

# Print the results
for file_data in all_file_data:
    print(f"File: {file_data['filename']}")
    if 'error' in file_data:
        print(f"Error: {file_data['error']}")
    else:
        print(json.dumps(file_data['invoice_data'], indent=2))
    print("\n" + "="*50 + "\n")